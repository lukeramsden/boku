import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id "java"
    id "application"
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

group = "com.lukeramsden"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

var log4jVersion = "2.20.0"
var junitJupiterVersion = "5.9.1"
var vertxVersion = "4.4.4"

dependencies {
    implementation("io.vertx:vertx-web")
    implementation("org.agrona:agrona:1.18.0")
    implementation("org.apache.logging.log4j:log4j-api:$log4jVersion")
    implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    implementation(platform("io.vertx:vertx-stack-depchain:$vertxVersion"))

    testImplementation("io.vertx:vertx-junit5")
    testImplementation("org.assertj:assertj-core:3.24.2")
    testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
}

test {
    useJUnitPlatform()
    exclude "**/*.class"
}

defaultTasks "unitTest", "shadowJar"

tasks.register("unitTest", Test) {
    exclude "**/*IntegrationTest.class"
}

tasks.register("integrationTest", Test) {
    include "**/*IntegrationTest.class"

    // we could make the integration tests run in parallel but it
    // requires a lot more plumbing for no gain in this project
    maxParallelForks 1

    afterTest { desc, result ->
        logger.quiet "${desc.className},${desc.name},${result.resultType},${(result.endTime - result.startTime) / 1000}s"
    }

    outputs.upToDateWhen { return false }
}

tasks.named("build").configure {
    dependsOn("unitTest")
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = "com.lukeramsden.boku.ServiceContainer"
}

jar {
    manifest {
        attributes "Multi-Release": "true",
                "Main-Class": "com.lukeramsden.boku.ServiceContainer"
    }
}

tasks.withType(ShadowJar).configureEach {
    archiveClassifier.set("fat")
    manifest {
        attributes "Multi-Release": "true",
                "Main-Class": "com.lukeramsden.boku.ServiceContainer"
    }
    mergeServiceFiles()
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
    }
}
